package com.jumploo.cms.conf;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.List;

import org.apache.log4j.Logger;
import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.transport.socket.SocketAcceptor;
import org.apache.mina.transport.socket.SocketSessionConfig;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

import com.jumploo.cms.db.DBConfig;
import com.jumploo.cms.mgmt.InterationInterface;
import com.jumploo.cms.mgmt.MgmtProcess;
import com.jumploo.cms.tcp.SimpleMinaServerHandler;
import com.jumploo.cms.thread.MsgRcvThread;
import com.jumploo.cms.thread.TaskCleanThread;
import com.jumploo.cms.util.ConvertUtil;
import com.jumploo.cms.util.TimeTools;
import com.jumploo.test.mongo1.MongoDBPool;




public class Cms 
{
	Logger runLog = Logger.getLogger(Cms.class.getName());
	public void init(String path) throws Exception
	{
		initConf(path);
		initDB();
		initThread();
	//	initStatistic();
		initTcp();
//		initRedis();
		initData();
		initAccessKey();
		initForward();
		initTools();
	}
	
	private void initTools()
	{
		SysDefine.timeTools = new TimeTools();
	}
	
	private void initForward()
	{
		//创建一个非阻塞的Server端Socket，用NIO
        SocketAcceptor acceptor = new NioSocketAcceptor();
        // 定义每次接收数据大小
        SocketSessionConfig sessionConfig = acceptor.getSessionConfig();
        sessionConfig.setReadBufferSize(2048);
        //创建接受数据的过滤器
        DefaultIoFilterChainBuilder chain = acceptor.getFilterChain();
        //设定这个过滤器将一行一行（/r/n）的读取数据
        chain.addLast("myChain", new ProtocolCodecFilter(new TextLineCodecFactory()));
        //设定服务器端的消息处理器: 一个 SimpleMinaServerHandler 对象
        acceptor.setHandler(new SimpleMinaServerHandler());
        //绑定端口，启动服务器
        try {
            acceptor.bind(new InetSocketAddress(SysDefine.SERVER_PORT));
            runLog.debug("Mina server is listing port:" + SysDefine.SERVER_PORT);
        } catch (IOException e) {
            e.printStackTrace();
            runLog.debug(e);
        }
	}
	
	private void initAccessKey()
	{
		
	}
	
	private void initTcp()
	{
	}
	private void initRedis()
	{
		
	}
	private void initData() throws Exception
	{
	}
	
//	private void initStatistic() throws Exception
//	{
//		
//		Attendance atten1 = new Attendance();
//		atten1.setCmdType(SysDefine.PROCESS_FLITERDATA);
//		
//		Attendance atten2 = new Attendance();
//		atten2.setCmdType(SysDefine.PROCESS_STATISTIC);
//		
//		Attendance atten3 = new Attendance();
//		atten3.setCmdType(SysDefine.PROCESS_CLEANDATA);
//		
//		Attendance[] attenList = {atten1, atten2, atten3};
//		SysDefine.statisticThreadProcess.addTask(attenList);
//	}
	
	private void initThread() throws Exception
	{
		//初始化信息接收
		InterationInterface tmp = new MgmtProcess();
		SysDefine.msgRcvThread = new MsgRcvThread(tmp);
		SysDefine.taskCleanThread = new TaskCleanThread(tmp);
	}
	
	private void initConf(String path) throws Exception
	{
		SAXReader read = new SAXReader();
		Document doc = read.read(path+SysDefine.LOCAL_CONF);
		Element root = doc.getRootElement();
		
		Element ele = root.element("db");
		List list = ele.elements("address");
		int len = list.size();
		SysDefine.dbIp = new String[len];
		SysDefine.dbPort = new int[len];
		SysDefine.SERVER_PORT = 8899;
		for(int i =0;i<len;i++)
		{
			Element arr = (Element)list.get(i);
			String[] aa = arr.getText().split(":");
			SysDefine.dbIp[i] = aa[0];
			SysDefine.dbPort[i] = ConvertUtil.parseInt(aa[1]);
		}
	}
	
	private void initDB() throws Exception
	{

		MongoDBPool mongoPool = null;
		if (SysDefine.dbIp.length == 1)
		{
			mongoPool = new MongoDBPool(SysDefine.dbIp[0],SysDefine.dbPort[0],new String[]{DBConfig.DB_SCHDB_NAME,DBConfig.DB_BASIC_NAME, DBConfig.DB_PROJCT_NAME, DBConfig.DB_PROJCTDEL_NAME, DBConfig.DB_KEY_NAME, DBConfig.DB_KEYDEL_NAME});
		}
		else
		{
			mongoPool = new MongoDBPool(SysDefine.dbIp,SysDefine.dbPort,new String[]{DBConfig.DB_SCHDB_NAME,DBConfig.DB_BASIC_NAME, DBConfig.DB_PROJCT_NAME, DBConfig.DB_PROJCTDEL_NAME, DBConfig.DB_KEY_NAME, DBConfig.DB_KEYDEL_NAME});
		}
		
		SysDefine.mongoPorcess = mongoPool.getMongoDBProcess(DBConfig.DB_SCHDB_NAME);
		SysDefine.mongoPorcess1 = mongoPool.getMongoDBProcess(DBConfig.DB_BASIC_NAME);
		SysDefine.mongoPorcess2 = mongoPool.getMongoDBProcess(DBConfig.DB_KEY_NAME);
		SysDefine.mongoPorcess3 = mongoPool.getMongoDBProcess(DBConfig.DB_KEYDEL_NAME);
		SysDefine.mongoPorcess4 = mongoPool.getMongoDBProcess(DBConfig.DB_PROJCT_NAME);
		SysDefine.mongoPorcess5 = mongoPool.getMongoDBProcess(DBConfig.DB_PROJCTDEL_NAME);
//		

//		MongoFilePool mp = null;
//		if (SysDefine.dbIp.length == 1)
//		{
//			mp = new MongoFilePool(SysDefine.dbIp[0],SysDefine.dbPort[0],new String[]{SysDefine.MONG_DB_YJF,SysDefine.MONG_DB_HEAD,SysDefine.MONG_DB_SUO});
//		}
//		else
//		{
//			mp = new MongoFilePool(SysDefine.dbIp,SysDefine.dbPort,
//					new String[]{SysDefine.MONG_DB_SUO,SysDefine.MONG_DB_YJF,SysDefine.MONG_DB_HEAD});
//		}
//		DBConfig.mongProcess = new MongoDBInterface[3]; 
//		DBConfig.mongProcess[0] = mp.getMongoDBProcess(SysDefine.MONG_DB_SUO);
//		DBConfig.mongProcess[1] = mp.getMongoDBProcess(SysDefine.MONG_DB_YJF);
//		DBConfig.mongProcess[2] = mp.getMongoDBProcess(SysDefine.MONG_DB_HEAD);
	}
}
